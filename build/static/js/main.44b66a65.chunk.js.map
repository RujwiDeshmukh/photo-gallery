{"version":3,"sources":["firebase/config.js","hooks/UseFirestore.js","comps/ImageGrid.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/Uploadform.js","comps/Modal.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unSub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","initial","animate","transition","delay","Title","p","style","color","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","console","log","width","UploadForm","types","type","onChange","e","selected","target","files","includes","Modal","selectedImg","classList","contains","y","auth","SignIn","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","MainPage","App","useAuthState","user","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44b66a65.chunk.js","sourcesContent":["import   firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n//import {firebase} from '@firebase/app';\r\n\r\n//const firebase = require('firebase/app')\r\n//import 'firebase/storage';\r\n//import 'firebase/firestore';\r\n\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAOAx0yhw0KPUCvPzn5VT89KYezLVG-uRM\",\r\n  authDomain: \"photo-gallery-45d16.firebaseapp.com\",\r\n  projectId: \"photo-gallery-45d16\",\r\n  storageBucket: \"photo-gallery-45d16.appspot.com\",\r\n  messagingSenderId: \"290234444582\",\r\n  appId: \"1:290234444582:web:79d029d1a3ea092b1bafe7\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n\r\n  //it starts up our storage service  n then anytime we want to do any kind of interaction with storage service on backend\r\n  const projectStorage = firebase.storage();\r\n\r\n  //anytime we want to interact with firestore database\r\n  const projectFirestore = firebase.firestore();\r\n\r\n  //for the timestamp /createdAt\r\n  const timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n  //special type of data, a timestamp data that firebase uses in its firestore\r\n\r\n\r\n  export {projectStorage, projectFirestore , timestamp};","import {useState, useEffect} from 'react';\r\nimport {projectStorage, projectFirestore, timestamp} from '../firebase/config';\r\n\r\n//collection here is images\r\nconst useFirestore = (collection) => {\r\n\r\n    //collection we want to get documents from\r\n    //for retrival of documents i.e. images from firestore n display on screen\r\n\r\n    const[docs, setDocs] =  useState([]);\r\n\r\n    useEffect(() => {\r\n        const unSub = projectFirestore.collection(collection)\r\n        .orderBy('createdAt', 'desc')\r\n        .onSnapshot((snap) =>  {\r\n          //it snapshots database i.e documents in it at that moment of time\r\n          let documents = [];\r\n          //it cycle through the documents currently in db at tht moment\r\n          snap.forEach(doc => {\r\n              //pushing data from that doument into document array\r\n              //doc.data()  //it gets us data inside the document, we an acess id as well\r\n              //spread op gets all properties from data \r\n              documents.push({...doc.data(), id:doc.id})\r\n          });\r\n\r\n          setDocs(documents);\r\n        })\r\n        \r\n        //cleanup functn \r\n        return () => unSub();\r\n    }, [collection])\r\n\r\n    return  { docs };\r\n}\r\n\r\nexport default useFirestore;\r\n\r\n//unSub returns functn n that fuctn is used to unsubscribe from collection \r\n//as we dont want to be listening to that collection to retrieve documents\r\n//We want to do that if we want to unmount grid component which is what is going to be be usingthis\r\n//hook to get data\r\n\r\n","import React from 'react';\r\nimport useFirestore from '../hooks/UseFirestore';\r\nimport { motion } from 'framer-motion';\r\n//for applying motion to image\r\n\r\n//We want to access data from firestore databse so we can cycle through those urls n output images for each one \r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n\r\n    const { docs } = useFirestore('images');\r\n    //console.log(docs);\r\n\r\n    return(\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map(doc  => (\r\n                <motion.div className=\"img-wrap\" key={doc.id}\r\n                layout /*earlier when we add new image it will pop to next , bt now it ll animate to new position*/\r\n                 whileHover={ {opacity : 1 }}\r\n                 onClick={() => setSelectedImg(doc.url)}>\r\n                     {/*Changing the value of selected image to doc.url */}\r\n                <motion.img src={doc.url} alt=\"uploaded pic\" \r\n                /*when img first comes on page */\r\n                initial ={{opacity : 0}}\r\n                animate ={{opacity : 1}}\r\n                /*wait for sec before animation */\r\n                transition = {{delay: 1}}/>\r\n                </motion.div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react';\nimport {motion} from 'framer-motion';\n\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>\n        <div> \n        <motion.p \n        initial={{ opacity: 0}}\n        animate={{ opacity: 1}}> <i style={{ color: '#61DAFB' }} className=\"fab fa-react\"></i>PhotoGallery</motion.p>\n        </div>\n      </h1>\n    </div>\n  )\n}\n\nexport default Title;","import {useState, useEffect} from 'react';\r\nimport {projectStorage, projectFirestore, timestamp} from '../firebase/config';\r\n\r\n//Hook in react is small chunk of reusable code\r\n\r\nconst useStorage = (file) => {\r\n \r\n    //Responsible for handling our file uploads n then returning some useful values abt that upload\r\n    //Parameter will be file tryng to upload n it ll come from uploadform file\r\n\r\n    const [progress, setProgress] = useState(0);\r\n    const [error,setError] = useState(0);\r\n    const [url, setUrl] = useState(null);\r\n    //it ll be the image url that we get back from storage after the image fully uploaded \r\n\r\n    //we want to use storage sdk right here to upload this file that we get inside the hook\r\n    //once get uploaded i also want to get image url n store that in database\r\n    //n that our database ll contain list of all image url n then we can use that data to load images in a react component\r\n\r\n    //now the code needs to run run everytime we get a new value bcoz that file value could change over time as\r\n    //user selects diff files so put all our logic inside useEffect hook\r\n\r\n    useEffect(() =>{\r\n\r\n        //get a reference where a file should be saved inside default firebase storage bucket\r\n        const storageRef = projectStorage.ref(file.name);\r\n\r\n        //reference to a collection that we want to save document \r\n        const collectionRef =projectFirestore.collection('images');\r\n        //collection is called images, as we r tryng to store data ,if it is not created then also firebase ll create it\r\n\r\n        //Asynchronuous it take some time to do we attached a listener to it\r\n        //whenever state of uplaod changes , progress changes\r\n        storageRef.put(file).on('state_changed', (snap) => {\r\n\r\n            //get a snapshot object =>//snapshot in time of upload at the moment in time \r\n\r\n            //percentage of progress of upload \r\n            let percentage =(snap.bytesTransferred / snap.totalBytes) * 100;\r\n          \r\n            //it is number in betn 0 n 100\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, /* after complete upload of a file */\r\n        async () => {\r\n            //IT FINDS THE FILE WE JUST UPLOADED N GETS DOWNLOAD URL N then storing it inside url variable\r\n           const url = await storageRef.getDownloadURL();\r\n           setUrl(url);\r\n           const createdAt = timestamp();\r\n           collectionRef.add({url : url, createdAt })\r\n\r\n           //variable url n state url r diff\r\n           //variable url doesnt override state url bcoz its inside a separate scope inside functn \r\n        });\r\n\r\n        //put will take a file n put it in the reference that locatn \r\n        //uploading the file to reference\r\n\r\n    } ,[file])    \r\n\r\n    \r\n    return { progress, url, error}\r\n}\r\n\r\nexport default useStorage;\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport useStorage from '../hooks/useStorage';\r\nimport { motion } from 'framer-motion'\r\n\r\nconst ProgressBar = ({ file, setFile}) => {\r\n\r\n    const  {url, progress} = useStorage(file);\r\n    console.log(progress, url);\r\n\r\n    useEffect(() => {\r\n    if(url)\r\n    {\r\n        setFile(null);\r\n        //as we get url after progress is 100% so we want progress bar to show \r\n    }\r\n    } , [url, setFile] )\r\n\r\n    //we need to store urls inside the database so that we can use the data to show the images\r\n  \r\n    return (\r\n       /* <div className=\"progress-bar\" style={{ width: progress + '%'}}> </div> */\r\n       <motion.div className=\"progress-bar\"\r\n       initial={{width: 0}}\r\n       animate={{width: progress + '%'}}>\r\n             \r\n       </motion.div>\r\n       \r\n       \r\n    )\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React, { useState } from 'react';\r\nimport ProgressBar from './ProgressBar';\r\n\r\nconst UploadForm = () => {\r\n\r\n    const[file, setFile] = useState(null);\r\n    const[error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpeg'];\r\n\r\n   const changeHandler = (e) => {\r\n       let selected = e.target.files[0];\r\n       //target will be all the selected files bt we want only first one\r\n       console.log(selected);\r\n\r\n       //now we want to store that in state\r\n       //we only want to update this to be whatever selected\r\n\r\n       //does that array types include types like png or jpeg so this ll evaluate to false\r\n       if(selected && types.includes(selected.type)){\r\n           setFile(selected);\r\n           setError(\" \");\r\n       }\r\n\r\n       else{\r\n           setFile(null);\r\n           setError('Please select an image file (png or jpeg)');\r\n\r\n       }\r\n   }\r\n    return (\r\n        <div>\r\n\r\n            <form>\r\n                <label>\r\n               {/* for taking input as file from computer */}\r\n                <input type=\"file\" onChange={changeHandler}/>\r\n                <span>+</span>\r\n                </label>\r\n                <div className=\"output\">\r\n                     {error &&  <div className=\"error\">{error}</div>}\r\n                     {file && <div> {file.name}</div>}\r\n                     {file && <ProgressBar file={file} setFile={setFile}/>}\r\n                     {/*we passed setFile ,so when the progress is complete we can set file back to null,then progress bar doesnt show gain  */}\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default UploadForm;","import React from 'react';\r\nimport {motion} from 'framer-motion';\r\n\r\nconst Modal = ({ selectedImg , setSelectedImg }) =>  {\r\n\r\n    const handleClick = (e) => {\r\n\r\n        //as we click on enlareged image it also closes itself we dont want that as\r\n        //enlarged image contain in backdrop so it closes\r\n        if(e.target.classList.contains('backdrop'))\r\n        {\r\n\r\n        setSelectedImg(null);\r\n        //as we click backdrop set image to null so modal disappears    \r\n        }\r\n    }\r\n\r\n \r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n        initial={{ opacity: 0}}\r\n        animate={{ opacity: 1}}>\r\n            {/*backdrop is background after selecting the image */}\r\n             <motion.img src={selectedImg} alt=\"enlarged pic\"\r\n             initial={ {y: \"-100vh\"} } /*viewport height*/\r\n             animate={{ y : 0}}\r\n             />\r\n             \r\n        </motion.div>\r\n    )\r\n\r\n}\r\n\r\nexport default Modal;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Title from './comps/Title';\nimport UploadForm from './comps/Uploadform';\nimport Modal from './comps/Modal';\nimport Delete from './comps/Delete'\nimport firebase from 'firebase/app';//firebase sdk\nimport 'firebase/firestore';//database\nimport 'firebase/auth';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport {useCollectionData} from 'react-firebase-hooks/firestore';\n\nconst auth = firebase.auth();\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <SignOut/>\n      <Title/>\n     <section>\n       { user ? <MainPage /> : <SignIn/> }\n     </section>\n    </div>\n  );\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n  return (\n     <>\n    <button className= \"sign-in\" onClick={signInWithGoogle}>Sign In with Google</button>\n    </>\n  )\n}\n\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <>\n    <button className =\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n    </>\n  )\n}\n\nfunction MainPage(){\n\n  const[selectedImg, setSelectedImg] = useState(null);\n  \n return (\n   <div>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      {selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg}/>} \n      {/*{selectedImg && <Delete selectedImg={selectedImg} setSelectedImg={setSelectedImg}/>} */}\n      \n      \n\n      </div>\n\n )\n}\n\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}